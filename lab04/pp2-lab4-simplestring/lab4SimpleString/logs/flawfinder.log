/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:19:53:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
SimpleString::SimpleString(const char* text): size_(strlen(text)), capacity_(strlen(text)+1){
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:19:78:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
SimpleString::SimpleString(const char* text): size_(strlen(text)), capacity_(strlen(text)+1){
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:21:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(data_, text, capacity_);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:27:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(data_, text.data_, size_+1);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:44:21:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    this->size_ = ::strlen(new_text);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:47:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(data_, new_text, capacity_);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:51:26:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int longerSize = max(strlen(this->data_), strlen(secondSimpleString.data_));
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:51:47:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int longerSize = max(strlen(this->data_), strlen(secondSimpleString.data_));
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:52:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int shorterSize = min(strlen(this->data_), strlen(secondSimpleString.data_));
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:52:48:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    int shorterSize = min(strlen(this->data_), strlen(secondSimpleString.data_));
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:75:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(textsMerged, this->data_, this->size_);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:76:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(textsMerged+ this->size_, secondSimpleString.data_, secondSimpleString.size_+1);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:80:19:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    this->size_ = strlen(this->data_);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:88:14:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        std::strncpy(substring, this->data_ + pos, count);
/tmp/tmpvq9liv77/student/lab4SimpleString/simpleString.cpp:92:14:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        std::strncpy(substring, this->data_ + pos, (this->size_ - pos));
