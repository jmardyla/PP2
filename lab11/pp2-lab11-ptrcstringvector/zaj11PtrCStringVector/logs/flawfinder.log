/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:120:14:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        std::strcpy(resultString, (*this)[i]);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:121:14:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
        std::strcat(resultString, rhs[i]);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:19:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char **memoryForData = new char *[srcPtrCStringVector.capacity_];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:42:32:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char **memoryForData = new char *[source.capacity_];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:72:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char **memoryForData = new char *[5 * sizeof(char*)];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:77:36:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        char **memoryForData = new char *[2 * size_];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:24:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char *textInNewVector = new char[strlen(srcPtrCStringVector[i]) + 1];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:25:14:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        std::strncpy(textInNewVector, srcPtrCStringVector[i], strlen(srcPtrCStringVector[i]) + 1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:25:63:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        std::strncpy(textInNewVector, srcPtrCStringVector[i], strlen(srcPtrCStringVector[i]) + 1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:47:42:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char *textInNewVector = new char[strlen(source[i]) + 1];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:48:14:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
        std::strncpy(textInNewVector, source[i], strlen(source[i]) + 1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:48:50:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        std::strncpy(textInNewVector, source[i], strlen(source[i]) + 1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:83:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    char* copiedText = new char[strlen(text2Add)+1];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:84:10:  [1] (buffer) strncpy:Easily used incorrectly; doesn't always \0-terminate or check for invalid pointers [MS-banned] (CWE-120).  
    std::strncpy(copiedText, text2Add, strlen(text2Add)+1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:84:40:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    std::strncpy(copiedText, text2Add, strlen(text2Add)+1);
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:119:39:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char* resultString = new char[strlen((*this)[i]) + strlen(rhs[i]) + 1];
/tmp/tmpmokdg2j6/student/zaj11PtrCStringVector/PtrCStringVector.cpp:119:60:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        char* resultString = new char[strlen((*this)[i]) + strlen(rhs[i]) + 1];
